using backend.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using Dapper;
using Microsoft.Data.SqlClient;
using System.Data;

namespace backend.Services
{
    public class AuthService : IAuthService
    {
        private readonly string _connectionString;
        private readonly IConfiguration _configuration;

        public AuthService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection")
                ?? throw new ArgumentNullException(nameof(configuration), "Connection string 'DefaultConnection' not found.");
            _configuration = configuration;
        }

        private IDbConnection CreateConnection() => new SqlConnection(_connectionString);

        public async Task<TokenResponseDto?> LoginAsync(UserLoginDto request)
        {
            Console.WriteLine($"LoginAsync called with Username: {request.Username}");

            using var connection = CreateConnection();
            Console.WriteLine("--------Database connection created");

            var user = await connection.QueryFirstOrDefaultAsync<User>(
                "SELECT * FROM Users WHERE Username = @Username",
                new { request.Username });
            Console.WriteLine($"User query executed. User found: {user is not null}");

            if (user is null)
            {
                Console.WriteLine("--------User not found, returning null");
                return null;
            }

            var passwordVerificationResult = new PasswordHasher<User>().VerifyHashedPassword(user, user.PasswordHash, request.Password);
            Console.WriteLine($"Password verification result: {passwordVerificationResult}");

            if (passwordVerificationResult == PasswordVerificationResult.Failed)
            {
                Console.WriteLine("--------Password verification failed");
                return null;
            }

            Console.WriteLine("--------Password verified, creating token response");
            var tokenResponse = await CreateTokenResponse(user);
            Console.WriteLine($"Token response created: {tokenResponse is not null}");

            return tokenResponse;
        }

        private async Task<TokenResponseDto> CreateTokenResponse(User user)
        {
            return new TokenResponseDto
            {
                AccessToken = CreateToken(user),
                RefreshToken = await GenerateAndSaveRefreshTokenAsync(user),
            };
        }

        public async Task<User?> RegisterAsync(UserRegisterDto request)
        {
            using var connection = CreateConnection();
            var existingUser = await connection.QueryFirstOrDefaultAsync<User>(
                "SELECT UserId FROM Users WHERE Username = @Username OR Email = @Email",
                new { request.Username, request.Email });

            if (existingUser != null)
            {
                return null;
            }

            if (string.IsNullOrWhiteSpace(request.Email))
            {
                throw new ArgumentException("Email is required.");
            }

            var user = new User
            {
                Username = request.Username,
                Email = request.Email,
                PasswordHash = new PasswordHasher<User>().HashPassword(null, request.Password)
                // UserId is auto-generated by IDENTITY(1,1) -> so no need to set it
            };

            var userId = await connection.QuerySingleAsync<int>(
                "INSERT INTO Users (Username, Email, PasswordHash) OUTPUT INSERTED.UserId VALUES (@Username, @Email, @PasswordHash)",
                user);

            user.UserId = userId; // generated UserId
            return user;
        }

        public async Task<TokenResponseDto?> RefreshTokensAsync(RefreshTokenRequestDto request)
        {
            var user = await ValidateRefreshTokenAsync(request.UserId, request.RefreshToken);
            if (user is null)
                return null;

            return await CreateTokenResponse(user);
        }

        private async Task<User?> ValidateRefreshTokenAsync(int userId, string refreshToken)
        {
            using var connection = CreateConnection();
            var user = await connection.QueryFirstOrDefaultAsync<User>(
                "SELECT * FROM Users WHERE UserId = @UserId",
                new { UserId = userId });

            if (user is null || user.RefreshToken != refreshToken
                || user.RefreshTokenExpiryTime <= DateTime.UtcNow)
            {
                return null;
            }

            return user;
        }

        private string GenerateRefreshToken()
        {
            var randomNumber = new byte[32];
            using var rng = RandomNumberGenerator.Create();
            rng.GetBytes(randomNumber);
            return Convert.ToBase64String(randomNumber);
        }

        private async Task<string> GenerateAndSaveRefreshTokenAsync(User user)
        {
            var refreshToken = GenerateRefreshToken();
            using var connection = CreateConnection();
            await connection.ExecuteAsync(
                "UPDATE Users SET RefreshToken = @RefreshToken, RefreshTokenExpiryTime = @RefreshTokenExpiryTime WHERE UserId = @UserId",
                new
                {
                    UserId = user.UserId,
                    RefreshToken = refreshToken,
                    RefreshTokenExpiryTime = DateTime.UtcNow.AddDays(7)
                });
            return refreshToken;
        }

        private string CreateToken(User user)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
            };

            var key = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(_configuration.GetValue<string>("JwtSettings:SecretKey")!));

            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512);

            var tokenDescriptor = new JwtSecurityToken(
                issuer: _configuration.GetValue<string>("JwtSettings:Issuer"),
                audience: _configuration.GetValue<string>("JwtSettings:Audience"),
                claims: claims,
                expires: DateTime.UtcNow.AddDays(1),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(tokenDescriptor);
        }

        public async Task<User?> GetUserByIdAsync(int userId)
        {
            using var connection = CreateConnection();
            var user = await connection.QueryFirstOrDefaultAsync<User>(
                "SELECT UserId, Username, Email, CreatedDate FROM Users WHERE UserId = @UserId",
                new { UserId = userId });

            return user;
        }

        public async Task LogoutAsync(int userId)
        {
            using var connection = CreateConnection();
            var rowsAffected = await connection.ExecuteAsync(
                "UPDATE Users SET RefreshToken = NULL, RefreshTokenExpiryTime = NULL WHERE UserId = @UserId",
                new { UserId = userId });

            if (rowsAffected == 0)
            {
                throw new KeyNotFoundException($"User with ID {userId} not found.");
            }
        }
    }
}